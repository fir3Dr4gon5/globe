@page
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration;
@model IndexModel
@{
    ViewData["Title"] = "Globe";
    
}ï»¿
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - globe</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="http://www.webglearth.com/v2/api.js"></script>

<script>
</script>

</head>

<body>
    <ul id="background" class="background">
        <li class="fadein" style="background-image: url('images/stars-bkg.jpg');"></li>
    </ul>
    
    <div id="earth_div" style="position: relative;min-height: 100%; height: 100%;"></div>
    <div class="container">
        <div id="top-left">
	    <div class="panel">
	       <div class="panel-text">
	            <div>CPU Temp: <span id="lblCpuTemp" ></span></div>
                </div>
	    </div>
	</div>
	
        <div id="top-right">
	    <div class="panel">
	       <div class="panel-text">		
		   <span id="lblDate" ></span>
		</div>
	    </div>
	</div>

	</div>

        <div id="center-above"></div>
        <div id="center">
	
            <div id="title"></div>
            <div id="subtitle"></div>

        </div>
        <div id="center-below">
	    <span id="lblMessage"></span>	      
        </div>

        <div class="wrap">	
            <div id="bottom-left">
	         <div class="panel">
	             <div class="panel-text">
                         <div>Time: <span id="lblTime" ></span></div>		
		     </div>
	         </div>
	    </div>	
            <div id="bottom"></div>	    
            <div id="bottom-right">
	        <div class="panel">
	           <div class="panel-text">
                       <div><span id="lblWeather" ></span></div>		
		   </div>
	        </div>
	    </div>

        </div>
    </div>
    
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <!--    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> -->
    <script src="~/js/site.js" asp-append-version="true"></script>

<script>
/* IIFE */

(function() {
    'use strict';
    
     var _  = {
	 i :  0,
	 earth : undefined,
	 city : '@Configuration["Weather:City"]' 
	 
     };
          
    window.addEventListener('DOMContentLoaded', (event) => {
         console.log('init..');
	 init();
	 console.log('Running..');
	 
    });
    
    function init() {
        init_globe();
	    init_markers();
        fireUpdates();
    }
    
    var timer = setInterval(change, 20000);
    
    function change() {
    
        fireUpdates();
    }
    
    function fireUpdates()
    {

       fireFastUpdates();       
       if (_.i % 20 == 0 ) {
           fireSlowUpdates();
       }       
       _.i++;
       
    }
    
    function fireFastUpdates()
    {
         console.log("fireFastUpdates:" + _.i);
    	 clearMessage();
         updateTimeLabel();

    }
    
    function fireSlowUpdates()
    {
         console.log("fireSlowUpdates:" + _.i);
   	 getCpuTemp();           
	 getWeather();
	 updateVolcanos()
    }
    
  function init_globe() {
       var options = {atmosphere: true, center: [30, 6], zoom:3.5};
       _.earth = new WE.map('earth_div', options);
        WE.tileLayer('http://tileserver.maptiler.com/nasa/{z}/{x}/{y}.jpg', {
          minZoom: 0,
          maxZoom: 5,
          attribution: 'NASA'
        }).addTo(_.earth);
	

          // Start a simple rotation animation
        var before = null;
        requestAnimationFrame(function animate(now) {
            var c = _.earth.getPosition();
            var elapsed = before? now - before: 0;
            before = now;
            _.earth.setCenter([c[0], c[1] - 0.05*(elapsed/30)]);
            requestAnimationFrame(animate);
        });

      }
      
   function init_markers()
   {
	var marker = WE.marker([54.6, -6]).addTo(_.earth);	
	marker.bindPopup("<b>Home!</b>", {maxWidth: 90, closeButton:true}).openPopup();
	     
   }

   function clearMessage()
   {
       // reset previous message
       $("#lblMessage").html("");
   }
   
   function updateTimeLabel(){
   
         var time = getCurrentTime();
	 var lblTime = document.getElementById("lblTime");
	 lblTime.innerHTML = time;
	 
	 var date = getCurrentDate();
	 var lblDate = document.getElementById("lblDate");
	 lblDate.innerHTML = date;
   }
   
   
   function getCurrentTime() {
   
         var date = new Date();
	 var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
	 var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
	 var time = hours + ":" + minutes;
         
	 return time;
	
   }
   
   function getCurrentDate() {
   
       const date = new Date();
       const month = date.toLocaleString('default', { month: 'long' });
       var day = suffix(date.getDate() ) ;
       var dateString = day + " " + month + " " + date.getFullYear(); 
       return dateString;
   }
              
   function suffix(i) { 
       var j = i % 10, k = i % 100; 
	
       if (j == 1 && k != 11) { return i + "st"; } 
       if (j == 2 && k != 12) { return i + "nd"; } 
       if (j == 3 && k != 13) { return i + "rd"; } 
	return i +  "th";
    }
    
    function getCpuTemp(){

	    fetch('/api/CpuTemp')
	      .then (response => response.json())
	        .then ( result  => {
		    $("#lblCpuTemp").html( Math.trunc(result[0].cpu1_temp))
		})
		.catch(error => $("#lblMessage").html("CpuTemp API Error: " +error));
    }
    
    
    function getWeather(){
        
	     fetch('/api/Weather/City/'+ _.city)
	      .then (response => response.json())
	        .then ( result  => {
		    $("#lblWeather")
		    .html(`${_.city}: ${result.temp} &deg;C <br/>${result.summary}` )
		    })
		.catch(error => $("#lblMessage").html("Weather API Error: " +error));
    }
    
    function getVolcanos(){
        return fetch('/api/Volcano')
	  .then (response => response.json())
 	.catch(error => $("#lblMessage").html("Volcanos API Error: " +error));

    }
    function updateVolcanos(){
    
        var promise  = getVolcanos();
	promise.then ( volcanos => {
	    volcanos.forEach(function (o, index) {
	        var marker = WE.marker([o.lat, o.lon]).addTo(_.earth);	
	        marker.bindPopup(`<font><b>${o.name}</b></font>`, {maxWidth:90,closeButton:false}).openPopup();
	    });
	});	  
    }
      
 })();
</script>
</body>
